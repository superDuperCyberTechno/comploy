#!/usr/bin/env bash
declare -A hosts

# comploy 2.2
# https://github.com/superDuperCyberTechno/comploy
# This is free and unencumbered software released into the public domain.
##################################################################

# ██████╗ ██████╗ ███╗   ██╗███████╗██╗ ██████╗ 
#██╔════╝██╔═══██╗████╗  ██║██╔════╝██║██╔════╝ 
#██║     ██║   ██║██╔██╗ ██║█████╗  ██║██║  ███╗
#██║     ██║   ██║██║╚██╗██║██╔══╝  ██║██║   ██║
#╚██████╗╚██████╔╝██║ ╚████║██║     ██║╚██████╔╝
# ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝     ╚═╝ ╚═════╝
#customize by editing vars below

#add files to NOT deploy here, seperate with a space.
ignored_files='comploy'

#Laravel-specific excludes, uncomment to properly sync your Laravel project
#ignored_files+=' /storage/framework/*/* /storage/app/* /storage/logs/* *database.sqlite* *-journal .env'

#destination host domain/IP address and folder pairs
#you can add multiple servers, one per line like this:
#hosts['HOST']='ABSOLUTE_PATH_TO_WEBSERVER_ROOT'
#or:
#hosts['google.com']='/var/www/google.com/html'
hosts['']=''

#optionally define the absolute local path to the SSH key to access the deployment server(s)
key=''

#if you don't wanna screw around with git and just want to synchronize with the server, disable git here
#if set to true, it will also try to push to the repo
use_git=true
#if you use composer, this variable controls if you want to run composer install after deployment
use_composer=true

##################################################################

#███╗   ███╗ █████╗  ██████╗ ██╗ ██████╗
#████╗ ████║██╔══██╗██╔════╝ ██║██╔════╝
#██╔████╔██║███████║██║  ███╗██║██║
#██║╚██╔╝██║██╔══██║██║   ██║██║██║     
#██║ ╚═╝ ██║██║  ██║╚██████╔╝██║╚██████╗
#╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝
#here be dragons, steel yourself

#if we use composer, ignore the /vendor folder
if $use_composer; then
    ignored_files+=' /vendor'
fi

if $use_git; then
    ignored_files+=' /.git'
fi

#if we haven't set the key, then simply use the local id_rsa
if [ -z "${key}" ]; then
    key="${HOME}/.ssh/id_rsa"
fi

if $use_git; then
    for host in "${!hosts[@]}"; do
        server_dir="${hosts[$host]}"
        #detect if we already have deployed by checking if the folder's empty
        is_first_run=$(ssh -i "${key}" "root@${host}" 'if [ -z "$(ls -A '${server_dir}')" ];then echo 1;fi;')

        #if there are uncommitted shit on first run
        if [[ $is_first_run ]] && { [[ $(git ls-files -m) ]] || [[ $(git ls-files . --exclude-standard --others) ]]; }; then
            echo "ABORTING: Make sure that your first deploy is from a fresh repository with NO modified - OR untracked files."
            exit 1
        fi
    done
fi

#if you provide comploy with an argument (string), use it as commit message if there's staged files. otherwise, simply deploy all unchanged files (since last commit)
if $use_git; then
    if [[ $(git diff --cached --exit-code) ]] && [[ "${1}" ]] && [[ "${1}" != " " ]];then
        git commit -m "${1}"
    fi
fi

#add the ignore files from the config header var (replace space with newline)
echo "${ignored_files}" | tr ' ' '\n' > /tmp/comploy_ignore;

if $use_git; then
    #add all modified files to ignore list
    git ls-files -m >> /tmp/comploy_ignore
    #add the untracked files to the deploy ignore list
    git ls-files . --exclude-standard --others >> /tmp/comploy_ignore
fi

#sync the files
for host in "${!hosts[@]}"; do
    server_dir="${hosts[$host]}"
    echo "Syncing with ${host}..."
    rsync -e "ssh -i ${key}" -a --delete --exclude-from "/tmp/comploy_ignore" ./ "root@${host}:${server_dir}"

    #set the correct folder permissions
    ssh -i "${key}" "root@${host}" "chown -R www-data:www-data ${server_dir};find ${server_dir} -type f ! -perm 644 -exec chmod 644 {} \;;find ${server_dir} -type d ! -perm 755 -exec chmod 755 {} \;;"

    #if we use composer, we should install the packages from composer.lock (and exclude dev packages)
    if $use_composer; then
        ssh -i "${key}" "root@${host}" "cd ${server_dir} && sudo -u www-data composer install --no-dev --optimize-autoloader"
    fi
done

if $use_git; then
    git push
fi

#all is well
echo "Project synced and ready to go!"
