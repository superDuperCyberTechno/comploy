#!/bin/bash
declare -A hosts
#################################################################
#  _____ ___  ____  / __(_)___ _
# / ___/ __ \/ __ \/ /_/ / __ `/
#/ /__/ /_/ / / / / __/ / /_/ /
#\___/\____/_/ /_/_/ /_/\__, /
#                      /____/
#################################################################

#add files to not deploy here, seperate with a space
ignored_files="comploy session.vim .env *database.sqlite* /composer* /.git* /storage/*"

#destination host domain/IP address and folder pairs
#you can add multiple servers, one per line
#add them as shown in below example:
#hosts['google.com']='/var/www/google.com/html'
hosts['']=''

#################################################################
#   ____ ___  ____  ____  (_)____
#  / __ `__ \/ __ `/ __ `/ / ___/
# / / / / / / /_/ / /_/ / / /__ 
#/_/ /_/ /_/\__,_/\__, /_/\___/
#                /____/
#################################################################

for host in "${!hosts[@]}"; do
    server_dir="${hosts[$host]}"
    #detect if we already have deployed by checking if the folder's empty
    is_first_run=$(ssh root@$host 'if [ -z "$(ls -A '$server_dir')" ];then echo 1;fi;')

    # if there are uncommitted shit on first run
    if ( [[ $is_first_run ]] && ( [[ $(git ls-files -m) ]] || [[ $(git ls-files . --exclude-standard --others) ]] ));then
        echo "ABORTING: Make sure that your first deploy is from a fresh repository with NO modified - OR untracked files."
        exit 1
    fi
done

#if you provide comploy with an argument (string), use it as commit message if there's staged files. otherwise, simply deploy all unchanged files (since last commit)
if [[ $(git diff --cached --exit-code) ]] && [ ! -z "$1" -a "$1" != " " ];then
    git commit -m "$1"
fi

#add the ignore files from the config header var
echo $ignored_files | tr ' ' '\n' > .ignore;
#add modified files to the deploy blacklist
git ls-files -m >> .ignore
#add the untracked files to the deploy blacklist
git ls-files . --exclude-standard --others >> .ignore

#sync the files
for host in "${!hosts[@]}"; do
    server_dir="${hosts[$host]}"
    echo "Syncing with $host..."
    rsync -a --delete --exclude-from ".ignore" ./ root@$host:$server_dir

    #set the correct folder permissions
    ssh root@$host 'chown -R www-data:www-data /var/www;find /var/www -type f ! -perm 644 -exec chmod 644 {} \;;find /var/www -type d ! -perm 755 -exec chmod 755 {} \;;'
done

#remove the temporary, aggregated ignore list
rm -f .ignore

#all is well
echo "Project synced and ready to go!"
