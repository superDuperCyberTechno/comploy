#!/bin/bash
declare -A hosts

##################################################################

#  _____ ___  ____  _ ________
# / ___/ __ \/ __ \/ _ / / __ `/
#/ /__/ /_/ / / / / __/ / /_/ /
#\___/\____/_/ /_/_/ /_/\__, /
#                      /____/
#customize by editing vars below

#add files to NOT deploy here, seperate with a space
ignored_files='comploy session.vim .env *database.sqlite* *-journal /composer* /.git* /storage/*'

#destination host domain/IP address and folder pairs
#you can add multiple servers, one per line
#add them as shown in below example:
#hosts['google.com']='/var/www/google.com/html'
hosts['']=''

#optionally define the absolute local path to the SSH key to access the deployment server(s)
key=''

##################################################################

#   ____ ___  ____  ____  ______
#  / __ `__ \/ __ `/ __ `/ / ___/
# / / / / / / /_/ / /_/ / / /__ 
#/_/ /_/ /_/\__,_/\__, /_/\___/
#                /____/
#here be dragons, steel yourself

#if we haven't set the key, then simply use the local id_rsa
if [ -z "$key" ]; then
    key='~/.ssh/id_rsa'
fi

#for all hosts...
for host in "${!hosts[@]}"; do
    server_dir="${hosts[$host]}"
    #detect if we already have deployed by checking if the folder's empty
    is_first_run=$(ssh -i "$key" root@$host 'if [ -z "$(ls -A '$server_dir')" ];then echo 1;fi;')

    # if there are uncommitted shit on first run
    if ( [[ $is_first_run ]] && ( [[ $(git ls-files -m) ]] || [[ $(git ls-files . --exclude-standard --others) ]] ));then
        echo "ABORTING: Make sure that your first deploy is from a fresh repository with NO modified - OR untracked files."
        exit 1
    fi
done

#if you provide comploy with an argument (string), use it as commit message if there's staged files. otherwise, simply deploy all unchanged files (since last commit)
if [[ $(git diff --cached --exit-code) ]] && [ ! -z "$1" -a "$1" != " " ];then
    git commit -m "$1"
fi

#add the ignore files from the config header var
echo $ignored_files | tr ' ' '\n' > /tmp/comploy_ignore;
#add modified files to the deploy blacklist
git ls-files -m >> /tmp/comploy_ignore
#add the untracked files to the deploy blacklist
git ls-files . --exclude-standard --others >> /tmp/comploy_ignore

#sync the files
for host in "${!hosts[@]}"; do
    server_dir="${hosts[$host]}"
    echo "Syncing with $host..."
    rsync -e "ssh -i $key" -a --delete --exclude-from "/tmp/comploy_ignore" ./ root@$host:$server_dir

    #set the correct folder permissions
    ssh -i "$key" root@$host 'chown -R www-data:www-data /var/www;find /var/www -type f ! -perm 644 -exec chmod 644 {} \;;find /var/www -type d ! -perm 755 -exec chmod 755 {} \;;'
done

#all is well
echo "Project synced and ready to go!"

